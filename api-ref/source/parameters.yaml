# variables in header
header_version:
  description: |
    Specific API microversion used to generate this response.
  in: header
  required: true
  type: string
openstack-request-id:
  description: >
    A unique ID for tracking the request. The request ID associated with the request
    appears in the log lines for that request. By default, the middleware configuration
    ensures that the request ID appears in the log files.
  in: header
  required: false
  type: string
x-openstack-ironic-api-max-version:
  description: |
    Maximum API microversion supported by this endpoint, eg. "1.22"
  in: header
  required: true
  type: string
x-openstack-ironic-api-min-version:
  description: |
    Minimum API microversion supported by this endpoint, eg. "1.1"
  in: header
  required: true
  type: string
x-openstack-ironic-api-version:
  description: >
    A request SHOULD include this header to indicate to the Ironic API service what
    version the client supports. The server will transform the response object into
    compliance with the requested version, if it is supported, or return a
    406 Not Supported error.
    If this header is not supplied, the server will default to ``min_version``
    in all responses.
  in: header
  required: true
  type: string

# variables in path
allocation_ident:
  description: |
    The UUID or name of the allocation.
  in: path
  required: true
  type: string
bios_setting:
  description: |
    The name of the Bios setting.
  in: path
  required: true
  type: string
chassis_ident:
  description: |
    The UUID of the chassis.
  in: path
  required: true
  type: string
component:
  description: |
    The Bare Metal node component.
  in: path
  required: true
  type: string
deploy_template_ident:
  description: |
    The UUID or name of the deploy template.
  in: path
  required: true
  type: string
driver_ident:
  description: |
    The name of the driver.
  in: path
  required: true
  type: string
history_event_ident:
  description: |
    The UUID of a history event.
  in: path
  required: true
  type: string
hostname_ident:
  description: |
    The hostname of the conductor.
  in: path
  required: true
  type: string
ind_ident:
  description: |
    The indicator of a Bare Metal component.
  in: path
  required: true
  type: string
node_id:
  description: |
    The UUID of the node.
  in: path
  required: false
  type: string
node_ident:
  description: |
    The UUID or Name of the node.
  in: path
  required: true
  type: string
port_ident:
  description: |
    The UUID of the port.
  in: path
  required: true
  type: string
portgroup_ident:
  description: |
    The UUID or Name of the portgroup.
  in: path
  required: true
  type: string
trait:
  description: |
    A single trait for this node.
  in: path
  required: true
  type: string
volume_connector_id:
  description: |
    The UUID of the Volume connector.
  in: path
  required: true
  type: string
volume_target_id:
  description: |
    The UUID of the Volume target.
  in: path
  required: true
  type: string

agent_token:
  description: |
    The token of the ironic-python-agent ramdisk, sent to the Bare Metal
    service for authentication purposes.
  in: query
  required: true
  type: string
agent_version:
  description: |
    The version of the ironic-python-agent ramdisk, sent back to the Bare Metal
    service and stored during provisioning.
  in: query
  required: true
  type: string
callback_url:
  description: |
    The URL of an active ironic-python-agent ramdisk, sent back to the Bare
    Metal service and stored temporarily during a provisioning action.
  in: query
  required: true
  type: string

detail:
  description: |
    Whether to show detailed information about the resource. This cannot be
    set to True if ``fields`` parameter is specified.
  in: query
  required: false
  type: boolean

# variables in driver query string
driver_detail:
  description: |
    Whether to show detailed information about the drivers (e.g. the
    "boot_interface" field).
  in: query
  required: false
  type: boolean
driver_type:
  description: |
    Only list drivers of this type. Options are "classic" or "dynamic".
  in: query
  required: false
  type: string

# variables common to all query strings
fields:
  description: |
    One or more fields to be returned in the response.

    For example, the following request returns only the ``uuid``
    and ``name`` fields for each node:

    ::

       GET /v1/nodes?fields=uuid,name
  in: query
  required: false
  type: array
fields_for_conductor:
  description: |
    One or more fields to be returned in the response.

    For example, the following request returns only the ``hostname``
    and ``alive`` fields for each conductor:

    ::

       GET /v1/conductors?fields=hostname,alive
  in: query
  required: false
  type: array
limit:
  description: |
    Requests a page size of items. Returns a number of items up to a limit
    value. Use the ``limit`` parameter to make an initial limited request and
    use the ID of the last-seen item from the response as the ``marker``
    parameter value in a subsequent limited request. This value cannot be
    larger than the ``max_limit`` option in the ``[api]`` section of the
    configuration. If it is higher than ``max_limit``, only ``max-limit``
    resources will be returned.
  in: query
  required: false
  type: integer
marker:
  description: |
    The ID of the last-seen item. Use the ``limit``
    parameter to make an initial limited request and use the ID of the
    last-seen item from the response as the ``marker`` parameter value
    in a subsequent limited request.
  in: query
  required: false
  type: string

# variables in the vendor_passthru query string
method_name:
  description: |
    Driver specific method name.
  in: query
  required: true
  type: string

# variable in the lookup query string
r_addresses:
  description: |
    Optional list of one or more Port addresses.
  in: query
  required: false
  type: array

# variables in the query string
r_allocation_node:
  description: |
    Filter the list of allocations by the node UUID or name.
  in: query
  required: false
  type: string
r_allocation_state:
  description: |
    Filter the list of allocations by the allocation state, one of ``active``,
    ``allocating`` or ``error``.
  in: query
  required: false
  type: string
r_associated:
  description: |
    Filter the list of returned nodes and only return those which are, or are
    not, associated with an ``instance_uuid``.
  in: query
  required: false
  type: boolean
r_conductor:
  description: |
    Filter the list of returned nodes, and only return those with the
    specified ``conductor``.
  in: query
  required: false
  type: string
r_conductor_group:
  description: |
    Filter the list of returned nodes, and only return those with the
    specified ``conductor_group``. Case-insensitive string up to 255
    characters, containing ``a-z``, ``0-9``, ``_``, ``-``, and ``.``.
  in: query
  required: false
  type: string
r_description_contains:
  description: |
    Filter the list of returned nodes, and only return those containing
    substring specified by ``description_contains``.
  in: query
  requred: false
  type: string
r_driver:
  description: |
    Filter the list of returned nodes, and only return those with the specified
    ``driver``.
  in: query
  required: false
  type: string
r_fault:
  description: |
    Filter the list of returned nodes, and only return those with the specified
    ``fault``. Possible values are determined by faults supported by ironic,
    e.g., ``power failure``, ``clean failure`` or ``rescue abort failure``.
  in: query
  required: false
  type: string
r_instance_uuid:
  description: |
    Filter the list of returned nodes, and only return the node with this
    specific instance UUID, or an empty set if not found.
  in: query
  required: false
  type: string
r_maintenance:
  description: |
    Filter the list of returned nodes and only return those with
    ``maintenance`` set to ``True`` or ``False``.
  in: query
  required: false
  type: boolean
# variable in the lookup query string
r_node_uuid:
  description: |
    Optional Node UUID.
  in: query
  required: false
  type: string
r_owner:
  description: |
    Filter the list of returned allocations, and only return those with
    the specified owner.
  in: query
  required: false
  type: string
r_port_address:
  description: |
    Filter the list of returned Ports, and only return the ones with the
    specified physical hardware address, typically MAC, or an empty set if not
    found.
  in: query
  required: false
  type: string
r_port_node_ident:
  description: |
    Filter the list of returned Ports, and only return the ones associated
    with this specific node (name or UUID), or an empty set if not found.
  in: query
  required: false
  type: string
r_port_node_uuid:
  description: |
    Filter the list of returned Ports, and only return the ones associated
    with this specific node UUID, or an empty set if not found.
  in: query
  required: false
  type: string
r_port_portgroup_ident:
  description: |
    Filter the list of returned Ports, and only return the ones associated
    with this specific Portgroup (name or UUID), or an empty set if not found.
  in: query
  required: false
  type: string
r_portgroup_address:
  description: |
    Filter the list of returned Portgroups, and only return the ones with the
    specified physical hardware address, typically MAC, or an empty set if not
    found.
  in: query
  required: false
  type: string
r_portgroup_node_ident:
  description: |
    Filter the list of returned Portgroups, and only return the ones associated
    with this specific node (name or UUID), or an empty set if not found.
  in: query
  required: false
  type: string
r_provision_state:
  description: |
    Filter the list of returned nodes, and only return those with the specified
    ``provision_state``.
  in: query
  required: false
  type: string
r_resource_class:
  description: |
    Filter the list of returned nodes, and only return the ones with the
    specified resource class.
  in: query
  required: false
  type: string
r_volume_connector_node_ident:
  description: |
    Filter the list of returned Volume connectors, and only return the ones
    associated with this specific node (name or UUID), or an empty set if not
    found.
  in: query
  required: false
  type: string
r_volume_target_node_ident:
  description: |
    Filter the list of returned Volume targets, and only return the ones
    associated with this specific node (name or UUID), or an empty set if not
    found.
  in: query
  required: false
  type: string
sort_dir:
  description: |
    Sorts the response by the requested sort
    direction. A valid value is ``asc`` (ascending) or ``desc``
    (descending). Default is ``asc``. You can specify multiple pairs
    of sort key and sort direction query parameters. If you omit the
    sort direction in a pair, the API uses the natural sorting
    direction of the server attribute that is provided as the
    ``sort_key``.
  in: query
  required: false
  type: string
sort_key:
  description: |
    Sorts the response by this attribute value.
    Default is ``id``. You can specify multiple pairs of sort key and
    sort direction query parameters. If you omit the sort direction in
    a pair, the API uses the natural sorting direction of the server
    attribute that is provided as the ``sort_key``.
  in: query
  required: false
  type: string


# variable returned from /lookup
agent_config:
  description: |
    JSON document of configuration data for the ironic-python-agent process.
  in: body
  required: true
  type: JSON
agent_node:
  description: |
    JSON document containing the Node fields "uuid", "properties",
    "instance_info", and "driver_internal_info"; used by the
    ironic-python-agent process as it operates on the Node.
  in: body
  required: true
  type: JSON

# variables in the API body
alive:
  description: |
    The conductor status indicates whether a conductor is considered alive
    or not.
  in: body
  required: true
  type: boolean
allocation_last_error:
  description: |
    The error message for the allocation if it is in the ``error`` state,
    ``null`` otherwise.
  in: body
  required: true
  type: string
allocation_name:
  description: |
    The unique name of the allocation.
  in: body
  required: true
  type: string
allocation_node:
  description: |
    The UUID of the node assigned to the allocation. Will be ``null`` if a node
    is not yet assigned.
  in: body
  required: true
  type: string
allocation_patch:
  description: |
    A JSON patch document to apply to the allocation.
  in: body
  required: true
  type: JSON
allocation_resource_class:
  description: |
    The resource class requested for the allocation. Can be ``null`` if
    the allocation was created via backfilling and the target node did not
    have the resource class set.
  in: body
  required: true
  type: string
allocation_state:
  description: |
    The current state of the allocation. One of:

    * ``allocating`` - allocation is in progress.
    * ``active`` - allocation is finished and ``node_uuid`` is assigned.
    * ``error`` - allocation has failed, see ``last_error`` for details.
  in: body
  required: true
  type: string
allocation_traits:
  description: |
    The list of the traits requested for the allocation.
  in: body
  required: true
  type: array
allocation_uuid:
  description: |
    The UUID of the allocation associated with the node. If not ``null``, will
    be the same as ``instance_uuid`` (the opposite is not always true).
    Unlike ``instance_uuid``, this field is read-only. Please use the
    Allocation API to remove allocations.
  in: body
  required: true
  type: string
automated_clean:
  description: |
    Indicates whether the node will perform automated clean or not.
  in: body
  required: true
  type: boolean
bios_interface:
  description: |
    The bios interface to be used for this node.
  in: body
  required: true
  type: string
bios_setting_allowable_values:
  description: |
    A list of allowable values, otherwise ``null``.
  in: body
  required: true
  type: array
bios_setting_attribute_type:
  description: |
    A string describing the type of the Bios setting. May be ``null``.
  in: body
  required: true
  type: string
bios_setting_lower_bound:
  description: |
    The lowest allowed integer value. May be ``null``.
  in: body
  required: true
  type: integer
bios_setting_max_length:
  description: |
    The maximum string length of the value. May be ``null``.
  in: body
  required: true
  type: integer
bios_setting_min_length:
  description: |
    The minimum string length of the value. May be ``null``.
  in: body
  required: true
  type: integer
bios_setting_name:
  description: |
    The name of a Bios setting for a Node, eg. "virtualization".
  in: body
  required: true
  type: string
bios_setting_read_only:
  description: |
    This Bios seting is read only and can't be changed.
    May be None.
  in: body
  required: true
  type: boolean
bios_setting_reset_required:
  description: |
    After setting this Bios setting a node reboot is required.
    May be None.
  in: body
  required: true
  type: boolean
bios_setting_unique:
  description: |
    This Bios setting is unique to this node. May be ``null``.
  in: body
  required: true
  type: boolean
bios_setting_upper_bound:
  description: |
    The highest allowed integer value. May be ``null``.
  in: body
  required: true
  type: integer
bios_setting_value:
  description: |
    The value of a Bios setting for a Node, eg. "on".
  in: body
  required: true
  type: string
bios_settings:
  description: |
    Optional list of one or more Bios settings. It includes following fields
    "created_at", "updated_at", "links", "name", "value", "attribute_type",
    "allowable_values", "lower_bound", "max_length", "min_length", "read_only",
    "reset_required", "unique", "upper_bound"
  in: body
  required: true
  type: array
boot_device:
  description: |
    The boot device for a Node, eg. "pxe" or "disk".
  in: body
  required: true
  type: string
boot_interface:
  description: |
    The boot interface for a Node, e.g. "pxe".
  in: body
  required: true
  type: string
boot_mode:
  description: |
    The current boot mode state (uefi/bios)
  in: body
  type: string
candidate_nodes:
  description: |
    A list of UUIDs of the nodes that are candidates for this allocation.
  in: body
  required: true
  type: array
chassis:
  description: |
    A ``chassis`` object.
  in: body
  required: true
  type: array
chassis_uuid:
  description: |
    UUID of the chassis associated with this Node. May be empty or None.
  in: body
  required: true
  type: string
clean_step:
  description: |
    The current clean step. Introduced with the cleaning feature.
  in: body
  required: false
  type: string
clean_steps:
  description: |
    An ordered list of cleaning steps that will be performed on the node. A
    cleaning step is a dictionary with required keys 'interface' and 'step', and
    optional key 'args'. If specified, the value for 'args' is a keyword variable
    argument dictionary that is passed to the cleaning step method.
  in: body
  required: false
  type: array
component_name:
  description: |
    The name of the component available for the node.
  in: body
  required: true
  type: string
conductor:
  description: |
    The conductor currently servicing a node. This field is read-only.
  in: body
  required: false
  type: string
conductor_group:
  description: |
    The conductor group for a node. Case-insensitive string up to 255
    characters, containing ``a-z``, ``0-9``, ``_``, ``-``, and ``.``.
  in: body
  required: true
  type: string
configdrive:
  description: |
    A config drive to be written to a partition on the Node's boot disk. Can be
    a full gzip'ed and base-64 encoded image or a JSON object with the keys:

    * ``meta_data`` (optional) - JSON object with the standard meta data.
      Ironic will provide the defaults for the ``uuid`` and ``name`` fields.
    * ``network_data`` (optional) - JSON object with networking configuration.
    * ``user_data`` (optional) - user data. May be a string (which will be
      UTF-8 encoded); a JSON object, or a JSON array.
    * ``vendor_data`` (optional) - JSON object with extra vendor data.

    This parameter is only accepted when setting the state to "active" or
    "rebuild".
  in: body
  required: false
  type: string or object
console_enabled:
  description: |
    Indicates whether console access is enabled or disabled on this node.
  in: body
  required: true
  type: boolean
console_interface:
  description: |
    The console interface for a node, e.g. "no-console".
  in: body
  required: true
  type: string
created_at:
  description: |
    The UTC date and time when the resource was created,
    `ISO 8601 <https://en.wikipedia.org/wiki/ISO_8601>`_ format.
  in: body
  required: true
  type: string
d_bios_setting:
  description: |
    Dictionary containing the definition of a Bios setting. It includes the
    following fields "created_at", "updated_at", "links", "name", "value".
  in: body
  required: true
  type: dictionary
default_bios_interface:
  description: |
    The default bios interface used for a node with a dynamic driver, if no
    bios interface is specified for the node.
  in: body
  required: true
  type: string
default_boot_interface:
  description: |
    The default boot interface used for a node with a dynamic driver, if no
    boot interface is specified for the node.
  in: body
  required: true
  type: string
default_console_interface:
  description: |
    The default console interface used for a node with a dynamic driver, if no
    console interface is specified for the node.
  in: body
  required: true
  type: string
default_deploy_interface:
  description: |
    The default deploy interface used for a node with a dynamic driver, if no
    deploy interface is specified for the node.
  in: body
  required: true
  type: string
default_inspect_interface:
  description: |
    The default inspection interface used for a node with a dynamic driver, if
    no inspection interface is specified for the node.
  in: body
  required: true
  type: string
default_management_interface:
  description: |
    The default management interface used for a node with a dynamic driver, if
    no management interface is specified for the node.
  in: body
  required: true
  type: string
default_network_interface:
  description: |
    The default network interface used for a node with a dynamic driver, if
    no network interface is specified for the node.
  in: body
  required: true
  type: string
default_power_interface:
  description: |
    The default power interface used for a node with a dynamic driver, if
    no power interface is specified for the node.
  in: body
  required: true
  type: string
default_raid_interface:
  description: |
    The default RAID interface used for a node with a dynamic driver, if
    no RAID interface is specified for the node.
  in: body
  required: true
  type: string
default_rescue_interface:
  description: |
    The default rescue interface used for a node with a dynamic driver, if
    no rescue interface is specified for the node.
  in: body
  required: true
  type: string
default_storage_interface:
  description: |
    The default storage interface used for a node with a dynamic driver, if
    no storage interface is specified for the node.
  in: body
  required: true
  type: string
default_vendor_interface:
  description: |
    The default vendor interface used for a node with a dynamic driver, if
    no vendor interface is specified for the node.
  in: body
  required: true
  type: string
deploy_interface:
  description: |
    The deploy interface for a node, e.g. "iscsi".
  in: body
  required: true
  type: string
deploy_step:
  description: |
    The current deploy step.
  in: body
  required: false
  type: string
deploy_steps:
  description: |
    A list of deploy steps that will be performed on the node. A deploy step is
    a dictionary with required keys 'interface', 'step', 'priority' and optional
    key 'args'. If specified, the value for 'args' is a keyword variable
    argument dictionary that is passed to the deploy step method.
  in: body
  required: False
  type: array
deploy_template_name:
  description: |
    The unique name of the deploy template.
  in: body
  required: true
  type: string
deploy_template_step_args:
  description: |
    A dictionary of arguments that are passed to the deploy step method.
  in: body
  required: true
  type: object
deploy_template_step_interface:
  description: |
    The name of the driver interface.
  in: body
  required: true
  type: string
deploy_template_step_priority:
  description: |
    A non-negative integer priority for the step. A value of ``0`` will
    disable that step.
  in: body
  required: true
  type: integer
deploy_template_step_step:
  description: |
    The name of the deploy step method on the driver interface.
  in: body
  required: true
  type: string
deploy_template_steps:
  description: |
    The deploy steps of the deploy template. Must be a list of dictionaries
    containing at least one deploy step. See `Request Step`_ for step parameters.
  in: body
  required: true
  type: array
description:
  description: |
    Descriptive text about the Ironic service.
  in: body
  required: true
  type: string
disable_ramdisk:
  description: |
    If set to ``true``, the ironic-python-agent ramdisk will not be booted for
    cleaning. Only clean steps explicitly marked as not requiring ramdisk can
    be executed in this mode. Only allowed for manual cleaning.
  in: body
  required: false
  type: boolean
driver_info:
  description: |
    All the metadata required by the driver to manage this Node. List of fields
    varies between drivers, and can be retrieved from the ``/v1/drivers/<DRIVER_NAME>/properties`` resource.
  in: body
  required: true
  type: JSON
driver_internal_info:
  description: |
    Internal metadata set and stored by the Node's driver. This field is read-only.
  in: body
  required: false
  type: JSON
driver_name:
  description: |
    The name of the driver.
  in: body
  required: true
  type: string
driver_property_links:
  description: |
    A list of links to driver properties.
  in: body
  required: true
  type: array
drivers:
  description: |
    A list of driver objects.
  in: body
  required: true
  type: array
enabled_bios_interfaces:
  description: |
    The enabled bios interfaces for this driver.
  in: body
  required: true
  type: list
enabled_boot_interfaces:
  description: |
    The enabled boot interfaces for this driver.
  in: body
  required: true
  type: list
enabled_console_interfaces:
  description: |
    The enabled console interfaces for this driver.
  in: body
  required: true
  type: list
enabled_deploy_interfaces:
  description: |
    The enabled deploy interfaces for this driver.
  in: body
  required: true
  type: list
enabled_inspect_interfaces:
  description: |
    The enabled inspection interfaces for this driver.
  in: body
  required: true
  type: list
enabled_management_interfaces:
  description: |
    The enabled management interfaces for this driver.
  in: body
  required: true
  type: list
enabled_network_interfaces:
  description: |
    The enabled network interfaces for this driver.
  in: body
  required: true
  type: list
enabled_power_interfaces:
  description: |
    The enabled power interfaces for this driver.
  in: body
  required: true
  type: list
enabled_raid_interfaces:
  description: |
    The enabled RAID interfaces for this driver.
  in: body
  required: true
  type: list
enabled_rescue_interfaces:
  description: |
    The enabled rescue interfaces for this driver.
  in: body
  required: true
  type: list
enabled_storage_interfaces:
  description: |
    The enabled storage interfaces for this driver.
  in: body
  required: true
  type: list
enabled_vendor_interfaces:
  description: |
    The enabled vendor interfaces for this driver.
  in: body
  required: true
  type: list
extra:
  description: |
    A set of one or more arbitrary metadata key and
    value pairs.
  in: body
  required: true
  type: object
fault:
  description: |
    The fault indicates the active fault detected by ironic, typically the
    Node is in "maintenance mode".
    None means no fault has been detected by ironic. "power failure" indicates
    ironic failed to retrieve power state from this node. There are other
    possible types, e.g., "clean failure" and "rescue abort failure".
  in: body
  required: false
  type: string
history_event:
  description: |
    The event message body which has been logged related to the node for
    this error.
  in: body
  required: true
  type: string
history_event_type:
  description: |
    Short descriptive string to indicate where the error occurred at to
    enable API users/System Operators to be able to identify repeated
    issues in a particular area of operation, such as 'deployment',
    'console', 'cleaning', 'monitoring'.
  in: body
  required: true
  type: string
history_severity:
  description: |
    Severity indicator for the event being returned. Typically this will
    indicate if this was an Error or Informational entry.
  in: body
  required: true
  type: string
history_user_ident:
  description: |
    The UUID value representing the user whom appears to have caused
    the recorded event.
  in: body
  required: true
  type: string
hostname:
  description: |
    The hostname of this conductor.
  in: body
  required: true
  type: array
hosts:
  description: |
    A list of active hosts that support this driver.
  in: body
  required: true
  type: array
id:
  description: |
    Major API version, eg, "v1"
  in: body
  required: true
  type: string
indicator_name:
  description: |
    The name of the indicator.
  in: body
  required: true
  type: boolean
indicator_readonly:
  description: |
    Indicates whether the indicator is readonly.
  in: body
  required: true
  type: boolean
indicator_states:
  description: |
    The possible states for a given indicator, the only values that can be
    returned are:  ``ON``, ``OFF``, ``BLINKING`` and ``UNKNOWN``
  in: body
  required: true
  type: string
inspect_interface:
  description: |
    The interface used for node inspection, e.g. "no-inspect".
  in: body
  required: true
  type: string
inspection_finished_at:
  description: |
    The UTC date and time when the last hardware inspection finished
    successfully, `ISO 8601 <https://en.wikipedia.org/wiki/ISO_8601>`_ format.
    May be "null".
  in: body
  required: true
  type: string
inspection_started_at:
  description: |
    The UTC date and time when the hardware inspection was started,
    `ISO 8601 <https://en.wikipedia.org/wiki/ISO_8601>`_ format.
    May be "null".
  in: body
  required: true
  type: string
instance_info:
  description: |
    Information used to customize the deployed image. May include root partition
    size, a base 64 encoded config drive, and other metadata. Note that this field
    is erased automatically when the instance is deleted (this is done by requesting
    the Node provision state be changed to DELETED).
  in: body
  required: true
  type: JSON
instance_uuid:
  description: |
    UUID of the Nova instance associated with this Node.
  in: body
  required: true
  type: string
internal_info:
  description: |
    Internal metadata set and stored by the Port. This field is read-only.
  in: body
  required: true
  type: JSON
is_smartnic:
  description: |
    Indicates whether the Port is a Smart NIC port.
  in: body
  required: false
  type: boolean
last_error:
  description: |
    Any error from the most recent (last) transaction that started but failed to finish.
  in: body
  required: true
  type: string
lessee:
  description: |
    A string or UUID of the tenant who is leasing the object.
  in: body
  required: false
  type: string
links:
  description: |
    A list of relative links. Includes the self and
    bookmark links.
  in: body
  required: true
  type: array
local_link_connection:
  description: |
    The Port binding profile. If specified, must contain ``switch_id`` (only
    a MAC address or an OpenFlow based datapath_id of the switch are accepted
    in this field) and ``port_id`` (identifier of the physical port on the
    switch to which node's port is connected to) fields. ``switch_info`` is an
    optional string field to be used to store any vendor-specific information.
  in: body
  required: true
  type: JSON
maintenance:
  description: |
    Whether or not this Node is currently in "maintenance mode". Setting a Node
    into maintenance mode removes it from the available resource pool and halts
    some internal automation. This can happen manually (eg, via an API request)
    or automatically when Ironic detects a hardware fault that prevents communication
    with the machine.
  in: body
  required: true
  type: boolean
maintenance_reason:
  description: |
    User-settable description of the reason why this Node was placed into
    maintenance mode
  in: body
  required: false
  type: string
management_interface:
  description: |
    Interface for out-of-band node management, e.g. "ipmitool".
  in: body
  required: true
  type: string
n_components:
  description: |
    List all available indicators names for each of the hardware components
    for this node.
  in: body
  required: true
  type: array
n_description:
  description: |
    Informational text about this node.
  in: body
  required: true
  type: string
n_history:
  description: |
    History events attached to this node.
  in: body
  required: true
  type: array
n_ind_state:
  description: |
    The state of an indicator of the component of the node. Possible values
    are: ``OFF``, ``ON``, ``BLINKING`` or ``UNKNOWN``.
  in: body
  required: true
  type: string
n_indicators:
  description: |
    Retrieves all indicators for a given hardware component along with their
    attributes for this node.
  in: body
  required: true
  type: array
n_portgroups:
  description: |
    Links to the collection of portgroups on this node.
  in: body
  required: true
  type: array
n_ports:
  description: |
    Links to the collection of ports on this node
  in: body
  required: true
  type: array
n_properties:
  description: |
    Physical characteristics of this Node. Populated by ironic-inspector during
    inspection. May be edited via the REST API at any time.
  in: body
  required: true
  type: JSON
n_states:
  description: |
    Links to the collection of states. Note that this resource is also used to
    request state transitions.
  in: body
  required: true
  type: array
n_traits:
  description: |
    List of traits for this node.
  in: body
  required: true
  type: array
n_vifs:
  description: |
    VIFs attached to this node.
  in: body
  required: true
  type: array
n_volume:
  description: |
    Links to the volume resources.
  in: body
  required: true
  type: array
name:
  description: |
    The name of the driver.
  in: body
  required: true
  type: string
network_data:
  description: |
    Static network configuration in the OpenStack network data format to use
    during deployment and cleaning. Requires a specially crafted ramdisk, see
    `DHCP-less documentation
    <https://docs.openstack.org/ironic/latest/admin/dhcp-less.html>`_.
  in: body
  required: false
  type: JSON
network_interface:
  description: |
    Which Network Interface provider to use when plumbing the network
    connections for this Node.
  in: body
  required: true
  type: string
next:
  description: |
    A URL to request a next collection of the resource. This parameter is
    returned when ``limit`` is specified in a request and there remain items.
  in: body
  required: false
  type: string
node_name:
  description: |
    Human-readable identifier for the Node resource. May be undefined. Certain
    words are reserved.
  in: body
  required: false
  type: string
node_uuid:
  description: |
    UUID of the Node this resource belongs to.
  in: body
  required: true
  type: string
node_vif_ident:
  description: |
    The UUID or name of the VIF.
  in: body
  required: true
  type: string
nodes:
  description: |
    Links to the collection of nodes contained in
    this chassis.
  in: body
  required: true
  type: array
owner:
  description: |
    A string or UUID of the tenant who owns the object.
  in: body
  required: false
  type: string
passthru_async:
  description: |
    If True the passthru function is invoked asynchronously; if False,
    synchronously.
  in: body
  required: true
  type: boolean
passthru_attach:
  description: |
    True if the return value will be attached to the response object, and False
    if the return value will be returned in the response body.
  in: body
  required: true
  type: boolean
passthru_description:
  description: |
    A description of what the method does, including any method parameters.
  in: body
  required: true
  type: string
passthru_http_methods:
  description: |
    A list of HTTP methods supported by the vendor function.
  in: body
  required: true
  type: array
persistent:
  description: |
    Whether the boot device should be set only for the next reboot, or
    persistently.
  in: body
  required: true
  type: boolean
pg_ports:
  description: |
    Links to the collection of ports belonging to this portgroup.
  in: body
  required: true
  type: array
physical_network:
  description: |
    The name of the physical network to which a port is connected. May be
    empty.
  in: body
  required: true
  type: string
port_address:
  description: |
    Physical hardware address of this network Port, typically the hardware
    MAC address.
  in: body
  required: true
  type: string
portgroup_address:
  description: |
    Physical hardware address of this Portgroup, typically the hardware
    MAC address.
  in: body
  required: false
  type: string
portgroup_internal_info:
  description: |
    Internal metadata set and stored by the Portgroup. This field is read-only.
  in: body
  required: true
  type: JSON
portgroup_mode:
  description: |
    Mode of the port group. For possible values, refer to
    https://www.kernel.org/doc/Documentation/networking/bonding.txt. If not
    specified in a request to create a port group, it will be set to the value
    of the ``[DEFAULT]default_portgroup_mode`` configuration option. When set,
    can not be removed from the port group.
  in: body
  required: true
  type: string
portgroup_name:
  description: |
    Human-readable identifier for the Portgroup resource. May be undefined.
  in: body
  required: true
  type: string
portgroup_properties:
  description: |
    Key/value properties related to the port group's configuration.
  in: body
  required: true
  type: JSON
portgroup_uuid:
  description: |
    UUID of the Portgroup this resource belongs to.
  in: body
  required: true
  type: string
portgroups:
  description: |
    A collection of Portgroup resources.
  in: body
  required: true
  type: array
ports:
  description: |
    A collection of Port resources.
  in: body
  required: true
  type: array
power_interface:
  description: |
    Interface used for performing power actions on the node, e.g. "ipmitool".
  in: body
  required: true
  type: string
power_state:
  description: |
    The current power state of this Node. Usually, "power on" or "power off", but may be "None"
    if Ironic is unable to determine the power state (eg, due to hardware failure).
  in: body
  required: true
  type: string
power_timeout:
  description: |
    Timeout (in seconds) for a power state transition.
  in: body
  required: false
  type: integer
properties:
  description: |
    A list of links to driver properties.
  in: body
  required: true
  type: array
protected:
  description: |
    Whether the node is protected from undeploying, rebuilding and deletion.
  in: body
  required: false
  type: boolean
protected_reason:
  description: |
    The reason the node is marked as protected.
  in: body
  required: false
  type: string
provision_state:
  description: |
    The current provisioning state of this Node.
  in: body
  required: true
  type: string
provision_updated_at:
  description: |
    The UTC date and time when the resource was created,
    `ISO 8601 <https://en.wikipedia.org/wiki/ISO_8601>`_ format.
    ``null`` if the node is not being provisioned.
  in: body
  required: true
  type: string
pxe_enabled:
  description: |
    Indicates whether PXE is enabled or disabled on the Port.
  in: body
  required: true
  type: boolean
raid_config:
  description: |
    Represents the current RAID configuration of the node. Introduced with
    the cleaning feature.
  in: body
  required: false
  type: JSON
raid_interface:
  description: |
    Interface used for configuring RAID on this node, e.g. "no-raid".
  in: body
  required: true
  type: string
reason:
  description: |
    Specify the reason for setting the Node into maintenance mode.
  in: body
  required: false
  type: string
req_allocation_name:
  description: |
    The unique name of the Allocation.
  in: body
  required: false
  type: string
req_allocation_node:
  description: |
    The node UUID or name to create the allocation against, bypassing
    the normal allocation process.

    .. warning:: This field must not be used to request a normal allocation
                 with one candidate node, use ``candidate_nodes`` instead.
  in: body
  required: false
  type: string
req_allocation_resource_class:
  description: |
    The requested resource class for the allocation. Can only be missing when
    backfilling an allocation (will be set to the node's ``resource_class``
    in such case).
  in: body
  required: true
  type: string
req_allocation_traits:
  description: |
    The list of requested traits for the allocation.
  in: body
  required: false
  type: array
req_automated_clean:
  description: |
    Indicates whether the node will perform automated clean or not.
  in: body
  required: false
  type: boolean
req_bios_interface:
  description: |
    The bios interface to be used for this node.
  in: body
  required: false
  type: string
req_boot_device:
  description: |
    The boot device for a Node, eg. "pxe" or "disk".
  in: body
  required: true
  type: string
req_boot_interface:
  description: |
    The boot interface for a Node, e.g. "pxe".
  in: body
  required: false
  type: string
req_candidate_nodes:
  description: |
    The list of nodes (names or UUIDs) that should be considered for this
    allocation. If not provided, all available nodes will be considered.
  in: body
  required: false
  type: array
req_chassis:
  description: |
    A ``chassis`` object.
  in: body
  required: true
  type: array
req_chassis_uuid:
  description: |
    UUID of the chassis associated with this Node. May be empty or None.
  in: body
  required: false
  type: string
req_conductor_group:
  description: |
    The conductor group for a node. Case-insensitive string up to 255
    characters, containing ``a-z``, ``0-9``, ``_``, ``-``, and ``.``.
  in: body
  required: false
  type: string
req_console_enabled:
  description: |
    Indicates whether console access is enabled or disabled on this node.
  in: body
  required: true
  type: boolean
req_console_interface:
  description: |
    The console interface for a node, e.g. "no-console".
  in: body
  required: false
  type: string
req_deploy_interface:
  description: |
    The deploy interface for a node, e.g. "iscsi".
  in: body
  required: false
  type: string
req_description:
  description: |
    Descriptive text about the Ironic service.
  in: body
  required: false
  type: string
req_driver_info:
  description: |
    All the metadata required by the driver to manage this Node. List of fields
    varies between drivers, and can be retrieved from the
    ``/v1/drivers/<DRIVER_NAME>/properties`` resource.
  in: body
  required: false
  type: JSON
req_driver_name:
  description: |
    The name of the driver used to manage this Node.
  in: body
  required: true
  type: string
req_extra:
  description: |
    A set of one or more arbitrary metadata key and
    value pairs.
  in: body
  required: false
  type: object
req_inspect_interface:
  description: |
    The interface used for node inspection, e.g. "no-inspect".
  in: body
  required: false
  type: string
req_instance_info:
  description: |
    Information used to customize the deployed image. May include root partition
    size, a base 64 encoded config drive, and other metadata. Note that this field
    is erased automatically when the instance is deleted (this is done by requesting
    the Node provision state be changed to DELETED).
  in: body
  required: false
  type: JSON
req_instance_uuid:
  description: |
    UUID of the Nova instance associated with this Node.
  in: body
  required: false
  type: string
req_is_smartnic:
  description: |
    Indicates whether the Port is a Smart NIC port.
  in: body
  required: false
  type: boolean
req_local_link_connection:
  description: |
    The Port binding profile. If specified, must contain ``switch_id`` (only
    a MAC address or an OpenFlow based datapath_id of the switch are accepted
    in this field) and ``port_id`` (identifier of the physical port on the
    switch to which node's port is connected to) fields. ``switch_info`` is an
    optional string field to be used to store any vendor-specific information.
  in: body
  required: false
  type: JSON
req_maintenance:
  description: |
    Whether or not this Node is currently in "maintenance mode". Setting a Node
    into maintenance mode removes it from the available resource pool and halts
    some internal automation. This can happen manually (eg, via an API request)
    or automatically when Ironic detects a hardware fault that prevents communication
    with the machine.
  in: body
  required: false
  type: boolean
req_management_interface:
  description: |
    Interface for out-of-band node management, e.g. "ipmitool".
  in: body
  required: false
  type: string
req_n_description:
  description: |
    Informational text about this node.
  in: body
  required: false
  type: string
req_network_interface:
  description: |
    Which Network Interface provider to use when plumbing the network
    connections for this Node.
  in: body
  required: false
  type: string
req_node_uuid:
  description: |
    UUID of the Node this resource belongs to.
  in: body
  required: true
  type: string
req_node_vif_ident:
  description: |
    The UUID or name of the VIF.
  in: body
  required: true
  type: string
req_node_vif_port_uuid:
  description: |
    The UUID of a port to attach the VIF to. Cannot be specified with
    ``portgroup_uuid``.
  in: body
  required: false
  type: string
req_node_vif_portgroup_uuid:
  description: |
    The UUID of a portgroup to attach the VIF to. Cannot be specified with
    ``port_uuid``.
  in: body
  required: false
  type: string
req_persistent:
  description: |
    Whether the boot device should be set only for the next reboot, or
    persistently.
  in: body
  required: false
  type: boolean
req_physical_network:
  description: |
    The name of the physical network to which a port is connected. May be
    empty.
  in: body
  required: false
  type: string
req_port_address:
  description: |
    Physical hardware address of this network Port, typically the hardware
    MAC address.
  in: body
  required: true
  type: string
req_portgroup_address:
  description: |
    Physical hardware address of this Portgroup, typically the hardware
    MAC address.
  in: body
  required: false
  type: string
req_portgroup_mode:
  description: |
    Mode of the port group. For possible values, refer to
    https://www.kernel.org/doc/Documentation/networking/bonding.txt. If not
    specified in a request to create a port group, it will be set to the value
    of the ``[DEFAULT]default_portgroup_mode`` configuration option. When set,
    can not be removed from the port group.
  in: body
  required: false
  type: string
req_portgroup_name:
  description: |
    Human-readable identifier for the Portgroup resource. May be undefined.
  in: body
  required: false
  type: string
req_portgroup_properties:
  description: |
    Key/value properties related to the port group's configuration.
  in: body
  required: false
  type: JSON
req_portgroup_uuid:
  description: |
    UUID of the Portgroup this resource belongs to.
  in: body
  required: false
  type: string
req_power_interface:
  description: |
    Interface used for performing power actions on the node, e.g. "ipmitool".
  in: body
  required: false
  type: string
req_properties:
  description: |
    Physical characteristics of this Node. Populated during inspection, if
    performed. Can be edited via the REST API at any time.
  in: body
  required: false
  type: JSON
req_provision_state:
  description: |
    The requested provisioning state of this Node.
  in: body
  required: true
  type: string
req_pxe_enabled:
  description: |
    Indicates whether PXE is enabled or disabled on the Port.
  in: body
  required: false
  type: boolean
req_raid_interface:
  description: |
    Interface used for configuring RAID on this node, e.g. "no-raid".
  in: body
  required: false
  type: string
req_rescue_interface:
  description: |
    The interface used for node rescue, e.g. "no-rescue".
  in: body
  required: false
  type: string
req_resource_class_create:
  description: |
    A string which can be used by external schedulers to identify this Node as
    a unit of a specific type of resource.
  in: body
  required: false
  type: string
req_standalone_ports_supported:
  description: |
    Indicates whether ports that are members of this portgroup can be
    used as stand-alone ports.
  in: body
  required: false
  type: boolean
req_storage_interface:
  description: |
    Interface used for attaching and detaching volumes on this node, e.g.
    "cinder".
  in: body
  required: false
  type: string
req_target_boot_mode:
  description: |
    If a boot mode change has been requested, this field represents the
    requested (ie, "target") state, either "uefi" or "bios".
  in: body
  required: true
  type: string
req_target_power_state:
  description: |
    If a power state transition has been requested, this field represents the
    requested (ie, "target") state either "power on", "power off", "rebooting",
    "soft power off" or "soft rebooting".
  in: body
  required: true
  type: string
req_target_raid_config:
  description: |
    Represents the requested RAID configuration of the node, which will be
    applied when the Node next transitions through the CLEANING state. Introduced
    with the cleaning feature.
  in: body
  required: true
  type: JSON
req_target_secure_boot:
  description: |
    If a secure boot change has been requested, this field represents the
    requested (ie, "target") state, either ``true`` or ``false``.
  in: body
  required: true
  type: boolean
req_uuid:
  description: |
    The UUID for the resource.
  in: body
  required: false
  type: string
req_vendor_interface:
  description: |
    Interface for vendor-specific functionality on this node, e.g. "no-vendor".
  in: body
  required: false
  type: string
req_volume_target_properties:
  description: |
    A set of physical information of the volume such as the identifier
    (eg. IQN) and LUN number of the volume. This information is used to connect
    the node to the volume by the storage interface. The contents depend on the
    volume type.
  in: body
  required: false
  type: object
requested_provision_state:
  description: |
    One of the provisioning verbs: manage, provide, inspect, clean, active,
    rebuild, delete (deleted), abort, adopt, rescue, unrescue.
  in: body
  required: true
  type: string
rescue_interface:
  description: |
    The interface used for node rescue, e.g. "no-rescue".
  in: body
  required: true
  type: string
rescue_password:
  description: |
    Non-empty password used to configure rescue ramdisk during node rescue
    operation.
  in: body
  required: false
  type: string
reservation:
  description: |
    The ``name`` of an Ironic Conductor host which is holding a lock on this node,
    if a lock is held. Usually "null", but this field can be useful for debugging.
  in: body
  required: true
  type: string
resource_class:
  description: |
    A string which can be used by external schedulers to identify this Node as
    a unit of a specific type of resource. For more details, see:
    https://docs.openstack.org/ironic/latest/install/configure-nova-flavors.html
  in: body
  required: true
  type: string
response_driver_type:
  description: |
    Type of this driver ("classic" or "dynamic").
  in: body
  required: true
  type: string
retired:
  description: |
    Whether the node is retired and can hence no longer be provided, i.e. move
    from ``manageable`` to ``available``, and will end up in ``manageable``
    after cleaning (rather than ``available``).
  in: body
  required: false
  type: boolean
retired_reason:
  description: |
    The reason the node is marked as retired.
  in: body
  required: false
  type: string
secure_boot:
  description: |
    Indicates whether node is currently booted with secure_boot turned on.
  in: body
  type: boolean
standalone_ports_supported:
  description: |
    Indicates whether ports that are members of this portgroup can be
    used as stand-alone ports.
  in: body
  required: true
  type: boolean
storage_interface:
  description: |
    Interface used for attaching and detaching volumes on this node, e.g.
    "cinder".
  in: body
  required: true
  type: string
supported_boot_devices:
  description: |
    List of boot devices which this Node's driver supports.
  in: body
  required: true
  type: array
target_power_state:
  description: |
    If a power state transition has been requested, this field represents the
    requested (ie, "target") state, either "power on" or "power off".
  in: body
  required: true
  type: string
target_provision_state:
  description: |
    If a provisioning action has been requested, this field represents the
    requested (ie, "target") state. Note that a Node may go through several
    states during its transition to this target state. For instance, when requesting
    an instance be deployed to an AVAILABLE Node, the Node may go through the following
    state change progression: AVAILABLE -> DEPLOYING -> DEPLOYWAIT -> DEPLOYING -> ACTIVE
  in: body
  required: true
  type: string
target_raid_config:
  description: |
    Represents the requested RAID configuration of the node, which will be
    applied when the Node next transitions through the CLEANING state. Introduced
    with the cleaning feature.
  in: body
  required: true
  type: JSON
updated_at:
  description: |
    The UTC date and time when the resource was updated,
    `ISO 8601 <https://en.wikipedia.org/wiki/ISO_8601>`_ format.
    May be "null".
  in: body
  required: true
  type: string
uuid:
  description: |
    The UUID for the resource.
  in: body
  required: true
  type: string

# variables returned from node-validate
v_bios:
  description: |
    Status of the "bios" interface
  in: body
  required: true
  type: object
v_boot:
  description: |
    Status of the "boot" interface
  in: body
  required: true
  type: object
v_console:
  description: |
    Status of the "console" interface
  in: body
  required: true
  type: object
v_deploy:
  description: |
    Status of the "deploy" interface
  in: body
  required: true
  type: object
v_inspect:
  description: |
    Status of the "inspect" interface
  in: body
  required: true
  type: object
v_management:
  description: |
    Status of the "management" interface
  in: body
  required: true
  type: object
v_network:
  description: |
    Status of the "network" interface
  in: body
  required: true
  type: object
v_power:
  description: |
    Status of the "power" interface
  in: body
  required: true
  type: object
v_raid:
  description: |
    Status of the "raid" interface
  in: body
  required: true
  type: object
v_rescue:
  description: |
    Status of the "rescue" interface
  in: body
  required: true
  type: object
v_storage:
  description: |
    Status of the "storage" interface
  in: body
  required: true
  type: object
vendor_interface:
  description: |
    Interface for vendor-specific functionality on this node, e.g. "no-vendor".
  in: body
  required: true
  type: string
version:
  description: |
    Versioning of this API response, eg. "1.22".
  in: body
  required: true
  type: string
versions:
  description: |
    Array of information about currently supported versions.
  in: body
  required: true
  type: array

# variables returned from volume-connector
volume_connector_connector_id:
  description: |
    The identifier of Volume connector. The identifier format depends on the
    ``type`` of the Volume connector, eg
    "iqn.2017-05.org.openstack:01:d9a51732c3f" if the ``type`` is "iqn",
    "192.168.1.2" if the ``type`` is "ip".
  in: body
  required: true
  type: string
volume_connector_type:
  description: |
    The type of Volume connector such as "iqn", "ip", "wwnn" and "wwpn".
  in: body
  required: true
  type: string
volume_connectors:
  description: |
    A collection of Volume connector resources.
  in: body
  required: true
  type: array
volume_connectors_link:
  description: |
    Links to a collection of Volume connector resources.
  in: body
  required: true
  type: array

# variables returned from volume-target
volume_target_boot_index:
  description: |
    The boot index of the Volume target. "0" indicates that this volume is
    used as a boot volume.
  in: body
  required: true
  type: string
volume_target_properties:
  description: |
    A set of physical information of the volume such as the identifier
    (eg. IQN) and LUN number of the volume. This information is used to connect
    the node to the volume by the storage interface. The contents depend on the
    volume type.
  in: body
  required: true
  type: object
volume_target_volume_id:
  description: |
    The identifier of the volume. This ID is used by storage interface to
    distinguish volumes.
  in: body
  required: true
  type: string
volume_target_volume_type:
  description: |
    The type of Volume target such as 'iscsi' and 'fibre_channel'.
  in: body
  required: true
  type: string
volume_targets:
  description: |
    A collection of Volume target resources.
  in: body
  required: true
  type: array
volume_targets_link:
  description: |
    Links to a collection of Volume target resources.
  in: body
  required: true
  type: array
